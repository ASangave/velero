#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

### Required Inputs:
#
#   BUCKET: name of the Azure blob container to store Ark backups in.
#   
#   BACKUP_RESOURCE_GROUP: name of the resource group where Ark backups will be stored.
#
#   REGION: location of the resource group where Ark backups will be stored.
#
#   CLUSTER_RESOURCE_GROUP: name of the resource group containing the cluster.

### Optional Inputs:
#
#   ARK_ROOT: location of the base directory of the Ark codebase. Default: https://raw.githubusercontent.com/heptio/ark/master
#
#   ARK_USER: name of the service principal Ark will use. Default: heptio-ark
#
#   NAMESPACE: namespace where Ark server will be installed. Default: heptio-ark
#
#   BACKUP_STORAGE_ACCOUNT: name of the storage account where Ark backups will be stored. Default: <auto-generated>
#
#   API_TIMEOUT: timeout length for Azure API calls. Default: 5m
#
#   IMAGE: Docker image to use for Ark server. Default: gcr.io/heptio-images/ark:latest
#
#   IMAGE_PULL_KEY: credentials to use for creating an image pull secret on the Ark service account. Optional.

### Examples:
#
#   BUCKET=my-ark-backups BACKUP_RESOURCE_GROUP=my-ark-rg   \
#       REGION=westus2 CLUSTER_RESOURCE_GROUP=my-cluster-rg \ 
#       ./ark-install-azure.sh
#
#   BUCKET=my-ark-backups BACKUP_RESOURCE_GROUP=my-ark-rg   \
#       REGION=westus2 CLUSTER_RESOURCE_GROUP=my-cluster-rg \ 
#       NAMESPACE=my-ark-ns                                 \
#       ./ark-install-azure.sh

ARK_ROOT=${ARK_ROOT:-https://raw.githubusercontent.com/heptio/ark/master}
ARK_USER=${ARK_USER:-heptio-ark}
NAMESPACE=${NAMESPACE:-heptio-ark}
BACKUP_STORAGE_ACCOUNT=${BACKUP_STORAGE_ACCOUNT:-}
API_TIMEOUT=${API_TIMEOUT:-5m}
IMAGE=${IMAGE:-gcr.io/heptio-images/ark:master}
IMAGE_PULL_KEY=${IMAGE_PULL_KEY:-}

echo "BUCKET: $BUCKET"
echo "BACKUP RESOURCE GROUP: $BACKUP_RESOURCE_GROUP"
echo "REGION: $REGION"
echo "CLUSTER RESOURCE GROUP: $CLUSTER_RESOURCE_GROUP"
printf "\\n"
echo "ARK ROOT: $ARK_ROOT"
echo "ARK_USER: $ARK_USER"
echo "NAMESPACE: $NAMESPACE"
echo "BACKUP STORAGE ACCOUNT: $BACKUP_STORAGE_ACCOUNT"
echo "API TIMEOUT: $API_TIMEOUT"
echo "IMAGE: $IMAGE"
echo "IMAGE PULL KEY: $IMAGE_PULL_KEY"
printf "\\n"

getFileContent () {
    PREFIX=$(echo $1 | cut -c -4)
    if [[ $PREFIX == "http" ]]; then
        curl -s $1
    else
        cat $1
    fi
}

# 1. fetch Azure account information
AZURE_SUBSCRIPTION_ID=$(az account list --query '[?isDefault].id' -o tsv)
AZURE_TENANT_ID=$(az account list --query '[?isDefault].tenantId' -o tsv)

if [[ -z $AZURE_SUBSCRIPTION_ID ]]; then
    echo "could not determine Azure Subscription ID"
    exit
fi

if [[ -z $AZURE_TENANT_ID ]]; then
    echo "could not determine Azure Tenant ID"
    exit
fi

# 2. create backup resource group if it does not exist
BACKUP_RG_EXISTS=$(az group list --query [].name -o json | jq -r --arg RG $BACKUP_RESOURCE_GROUP -c '.[] | select(. == $RG)')
if [[ -z $BACKUP_RG_EXISTS ]]; then
    az group create \
        --name $BACKUP_RESOURCE_GROUP \
        --location $REGION
else
    echo "backup resource group $BACKUP_RESOURCE_GROUP already exists."
fi

# 3. create backup storage account if it doesn't exist, and get storage account key
BACKUP_STORAGE_ACCOUNT_EXISTS=$(az storage account list --query [].name -o json | jq -r --arg RG $BACKUP_RESOURCE_GROUP -c '.[] | select(. == $RG)')
if [[ -z $BACKUP_STORAGE_ACCOUNT_EXISTS ]]; then
    if [[ -z $BACKUP_STORAGE_ACCOUNT ]]; then
        BACKUP_STORAGE_ACCOUNT="ark$(uuidgen | cut -d '-' -f5 | tr '[A-Z]' '[a-z]')"
    fi

    az storage account create \
        --name $BACKUP_STORAGE_ACCOUNT \
        --resource-group $BACKUP_RESOURCE_GROUP \
        --sku Standard_GRS \
        --encryption-services blob \
        --https-only true \
        --kind BlobStorage \
        --access-tier Hot
else
    echo "backup storage account $BACKUP_STORAGE_ACCOUNT already exists."
fi

AZURE_STORAGE_KEY=$(az storage account keys list \
                        --account-name $BACKUP_STORAGE_ACCOUNT \
                        --resource-group $BACKUP_RESOURCE_GROUP \
                        --query [0].value \
                        -o tsv)

if [[ -z $AZURE_STORAGE_KEY ]]; then
    echo "could not get key for storage account $BACKUP_STORAGE_ACCOUNT"
    exit
fi

# 4. create blob container if it doesn't exist
az storage container create \
    --name $BUCKET \
    --account-name $BACKUP_STORAGE_ACCOUNT \
    --public-access off

echo "ensured blob container $BUCKET exists."

# 5. create service principal if it does not exist
SP_EXISTS=$(az ad sp list --query [].displayName -o json | jq -r --arg SP $ARK_USER -c '.[] | select(. == $SP)')
if [[ -z $SP_EXISTS ]]; then
    AZURE_CLIENT_SECRET=$(az ad sp create-for-rbac --name $ARK_USER --role "Contributor" --query 'password' -o tsv)
    
else
    echo "service principal $ARK_USER already exists"

    if [[ -z $AZURE_CLIENT_SECRET ]]; then
        echo "$AZURE_CLIENT_SECRET must be provided for the service principal $ARK_USER."
        exit
    fi
fi

AZURE_CLIENT_ID=$(az ad sp list --display-name $ARK_USER --query '[0].appId' -o tsv)

# 6. install ark prereqs
getFileContent $ARK_ROOT/examples/common/00-prereqs.yaml \
    | sed "s/name: heptio-ark/name: $NAMESPACE/" \
    | sed "s/namespace: heptio-ark/namespace: $NAMESPACE/" \
    | kubectl apply -f -

# 7. create cloud-credentials secret
kubectl create secret generic cloud-credentials \
    --namespace $NAMESPACE \
    --from-literal AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID} \
    --from-literal AZURE_TENANT_ID=${AZURE_TENANT_ID} \
    --from-literal AZURE_RESOURCE_GROUP=${CLUSTER_RESOURCE_GROUP} \
    --from-literal AZURE_CLIENT_ID=${AZURE_CLIENT_ID} \
    --from-literal AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET} \
    --from-literal AZURE_STORAGE_ACCOUNT_ID=${BACKUP_STORAGE_ACCOUNT} \
    --from-literal AZURE_STORAGE_KEY=${AZURE_STORAGE_KEY}

# 8. create ark config
getFileContent $ARK_ROOT/examples/azure/10-ark-config.yaml \
    | sed "s/<YOUR_BUCKET>/$BUCKET/" \
    | sed "s/<YOUR_TIMEOUT>/$API_TIMEOUT/" \
    | kubectl apply -f -

# 9. create image-pull secret if provided
if [[ ! -z $IMAGE_PULL_KEY ]]; then
    kubectl create secret docker-registry ark-image-pull-secret \
         --namespace $NAMESPACE \
         --docker-server https://gcr.io \
         --docker-username=_json_key \
         --docker-email=user@example.com \
         --docker-password "$(cat $IMAGE_PULL_KEY)"

    kubectl patch serviceaccount ark \
        --namespace $NAMESPACE \
        --patch '{"imagePullSecrets": [{"name": "ark-image-pull-secret"}]}'
fi

# 10. create ark deployment 
getFileContent $ARK_ROOT/examples/azure/00-ark-deployment.yaml \
    | sed "s|gcr.io/heptio-images/ark:latest|$IMAGE|" \
    | sed "s/namespace: heptio-ark/namespace: $NAMESPACE/" \
    | kubectl apply -f -
